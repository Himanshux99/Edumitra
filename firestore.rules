// Enhanced Firestore Security Rules for EduMitra Student Data System
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions for authentication and authorization
    function isAuthed() { return request.auth != null; }
    function isOwner(uid) { return isAuthed() && request.auth.uid == uid; }
    function userRole() {
      return isAuthed() ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role : null;
    }
    function isAdmin() { return ['admin','super_admin','teacher'].hasAny([userRole()]); }
    function isStudent() { return userRole() == 'student'; }

    // User profiles - Students can only access their own, Admins can access all
    match /users/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }

    // Student Academic Data - Core academic information
    match /studentAcademicData/{docId} {
      allow read, write: if isAuthed() && (
        (request.method == 'create' && request.resource.data.userId == request.auth.uid) ||
        (resource.data.userId == request.auth.uid)
      ) || isAdmin();
    }

    // Student Profile Data - Extended profile information
    match /students/{studentId} {
      allow read, write: if isOwner(studentId) || isAdmin();

      // Sub-collections for organized student data
      match /academics/{academicId} {
        allow read, write: if isOwner(studentId) || isAdmin();
      }

      match /timetable/{timetableId} {
        allow read, write: if isOwner(studentId) || isAdmin();
      }

      match /lessons/{lessonId} {
        allow read, write: if isOwner(studentId) || isAdmin();
      }

      match /notes/{noteId} {
        allow read, write: if isOwner(studentId) || isAdmin();
      }

      match /career/{careerId} {
        allow read, write: if isOwner(studentId) || isAdmin();
      }

      match /notifications/{notificationId} {
        allow read, write: if isOwner(studentId) || isAdmin();
      }
    }

    // Authentication event logging (audit trail)
    match /auth_events/{eventId} {
      allow create: if isAuthed();
      allow read, update, delete: if false; // keep audit logs append-only
    }

    // User bookmarks and personal content
    match /user_bookmarks/{docId} {
      allow read, write: if isAuthed() && (
        (request.method == 'create' && request.resource.data.userId == request.auth.uid) ||
        (resource.data.userId == request.auth.uid)
      ) || isAdmin();
    }

    // Study goals and personal targets
    match /study_goals/{goalId} {
      allow read, write: if isAuthed() && (
        (request.method == 'create' && request.resource.data.userId == request.auth.uid) ||
        (resource.data.userId == request.auth.uid)
      ) || isAdmin();
    }

    // Global course content - Read access for all authenticated users, write for admins
    match /courses/{id} { allow read: if isAuthed(); allow write: if isAdmin(); }
    match /assignments/{id} { allow read: if isAuthed(); allow write: if isAdmin(); }
    match /study_materials/{id} { allow read: if isAuthed(); allow write: if isAdmin(); }
    match /mock_tests/{id} { allow read: if isAuthed(); allow write: if isAdmin(); }
    match /scholarships/{id} { allow read: if isAuthed(); allow write: if isAdmin(); }
    match /internships/{id} { allow read: if isAuthed(); allow write: if isAdmin(); }
    match /exams/{id} { allow read: if isAuthed(); allow write: if isAdmin(); }

    // Personal academic records - Students own their data, Admins can access all
    match /attendance/{id} {
      allow read, write: if isAuthed() && (
        (request.method == 'create' && request.resource.data.userId == request.auth.uid) ||
        (resource.data.userId == request.auth.uid)
      ) || isAdmin();
    }

    match /grades/{id} {
      allow read, write: if isAuthed() && (
        (request.method == 'create' && request.resource.data.userId == request.auth.uid) ||
        (resource.data.userId == request.auth.uid)
      ) || isAdmin();
    }

    // Quiz attempts and results - Personal to each student
    match /quiz_attempts/{id} {
      allow read, write: if isAuthed() && (
        (request.method == 'create' && request.resource.data.userId == request.auth.uid) ||
        (resource.data.userId == request.auth.uid)
      ) || isAdmin();
    }

    // Personal timetables and schedules
    match /personal_timetables/{id} {
      allow read, write: if isAuthed() && (
        (request.method == 'create' && request.resource.data.userId == request.auth.uid) ||
        (resource.data.userId == request.auth.uid)
      ) || isAdmin();
    }

    // Career tools and resume data
    match /career_profiles/{id} {
      allow read, write: if isAuthed() && (
        (request.method == 'create' && request.resource.data.userId == request.auth.uid) ||
        (resource.data.userId == request.auth.uid)
      ) || isAdmin();
    }

    // Personal notifications and reminders
    match /user_notifications/{id} {
      allow read, write: if isAuthed() && (
        (request.method == 'create' && request.resource.data.userId == request.auth.uid) ||
        (resource.data.userId == request.auth.uid)
      ) || isAdmin();
    }

    // Lesson progress tracking
    match /lesson_progress/{id} {
      allow read, write: if isAuthed() && (
        (request.method == 'create' && request.resource.data.userId == request.auth.uid) ||
        (resource.data.userId == request.auth.uid)
      ) || isAdmin();
    }

    // Personal notes and study materials
    match /user_notes/{id} {
      allow read, write: if isAuthed() && (
        (request.method == 'create' && request.resource.data.userId == request.auth.uid) ||
        (resource.data.userId == request.auth.uid)
      ) || isAdmin();
    }
  }
}
